---
source: crates/compiler-test/src/lexer.rs
expression: token
---
[
    Token {
        lexeme: "fun",
        ty: FuncDecl,
        span: Span {
            start: 0,
            end: 2,
            line: 1,
            column: 1,
        },
    },
    Token {
        lexeme: "f1",
        ty: Identifier,
        span: Span {
            start: 4,
            end: 5,
            line: 1,
            column: 5,
        },
    },
    Token {
        lexeme: "->",
        ty: Arrow,
        span: Span {
            start: 7,
            end: 8,
            line: 1,
            column: 8,
        },
    },
    Token {
        lexeme: "1",
        ty: Literal,
        span: Span {
            start: 10,
            end: 10,
            line: 1,
            column: 11,
        },
    },
    Token {
        lexeme: ";",
        ty: Semicolon,
        span: Span {
            start: 11,
            end: 11,
            line: 1,
            column: 12,
        },
    },
    Token {
        lexeme: "fun",
        ty: FuncDecl,
        span: Span {
            start: 13,
            end: 15,
            line: 2,
            column: 1,
        },
    },
    Token {
        lexeme: "f2",
        ty: Identifier,
        span: Span {
            start: 17,
            end: 18,
            line: 2,
            column: 5,
        },
    },
    Token {
        lexeme: "nat",
        ty: NatDecl,
        span: Span {
            start: 20,
            end: 22,
            line: 2,
            column: 8,
        },
    },
    Token {
        lexeme: "x",
        ty: Identifier,
        span: Span {
            start: 24,
            end: 24,
            line: 2,
            column: 12,
        },
    },
    Token {
        lexeme: "->",
        ty: Arrow,
        span: Span {
            start: 26,
            end: 27,
            line: 2,
            column: 14,
        },
    },
    Token {
        lexeme: "T",
        ty: Literal,
        span: Span {
            start: 29,
            end: 29,
            line: 2,
            column: 17,
        },
    },
    Token {
        lexeme: "?",
        ty: QuestionMark,
        span: Span {
            start: 31,
            end: 31,
            line: 2,
            column: 19,
        },
    },
    Token {
        lexeme: "x",
        ty: Identifier,
        span: Span {
            start: 33,
            end: 33,
            line: 2,
            column: 21,
        },
    },
    Token {
        lexeme: "-",
        ty: Invalid,
        span: Span {
            start: 35,
            end: 35,
            line: 2,
            column: 23,
        },
    },
    Token {
        lexeme: "1",
        ty: Literal,
        span: Span {
            start: 37,
            end: 37,
            line: 2,
            column: 25,
        },
    },
    Token {
        lexeme: ":",
        ty: Colon,
        span: Span {
            start: 39,
            end: 39,
            line: 2,
            column: 27,
        },
    },
    Token {
        lexeme: "0",
        ty: Literal,
        span: Span {
            start: 41,
            end: 41,
            line: 2,
            column: 29,
        },
    },
    Token {
        lexeme: ";",
        ty: Semicolon,
        span: Span {
            start: 42,
            end: 42,
            line: 2,
            column: 30,
        },
    },
    Token {
        lexeme: "fun",
        ty: FuncDecl,
        span: Span {
            start: 44,
            end: 46,
            line: 3,
            column: 1,
        },
    },
    Token {
        lexeme: "f3",
        ty: Identifier,
        span: Span {
            start: 48,
            end: 49,
            line: 3,
            column: 5,
        },
    },
    Token {
        lexeme: "bool",
        ty: BoolDecl,
        span: Span {
            start: 51,
            end: 54,
            line: 3,
            column: 8,
        },
    },
    Token {
        lexeme: "x",
        ty: Identifier,
        span: Span {
            start: 56,
            end: 56,
            line: 3,
            column: 13,
        },
    },
    Token {
        lexeme: "->",
        ty: Arrow,
        span: Span {
            start: 58,
            end: 59,
            line: 3,
            column: 15,
        },
    },
    Token {
        lexeme: "T",
        ty: Literal,
        span: Span {
            start: 61,
            end: 61,
            line: 3,
            column: 18,
        },
    },
    Token {
        lexeme: "?",
        ty: QuestionMark,
        span: Span {
            start: 63,
            end: 63,
            line: 3,
            column: 20,
        },
    },
    Token {
        lexeme: "x",
        ty: Identifier,
        span: Span {
            start: 65,
            end: 65,
            line: 3,
            column: 22,
        },
    },
    Token {
        lexeme: "&",
        ty: Ampersand,
        span: Span {
            start: 67,
            end: 67,
            line: 3,
            column: 24,
        },
    },
    Token {
        lexeme: "F",
        ty: Literal,
        span: Span {
            start: 69,
            end: 69,
            line: 3,
            column: 26,
        },
    },
    Token {
        lexeme: ":",
        ty: Colon,
        span: Span {
            start: 71,
            end: 71,
            line: 3,
            column: 28,
        },
    },
    Token {
        lexeme: "0",
        ty: Literal,
        span: Span {
            start: 73,
            end: 73,
            line: 3,
            column: 30,
        },
    },
    Token {
        lexeme: ";",
        ty: Semicolon,
        span: Span {
            start: 74,
            end: 74,
            line: 3,
            column: 31,
        },
    },
    Token {
        lexeme: "1",
        ty: Literal,
        span: Span {
            start: 76,
            end: 76,
            line: 4,
            column: 1,
        },
    },
    Token {
        lexeme: "?",
        ty: QuestionMark,
        span: Span {
            start: 78,
            end: 78,
            line: 4,
            column: 3,
        },
    },
    Token {
        lexeme: "f2",
        ty: Identifier,
        span: Span {
            start: 80,
            end: 81,
            line: 4,
            column: 5,
        },
    },
    Token {
        lexeme: "2",
        ty: Literal,
        span: Span {
            start: 83,
            end: 83,
            line: 4,
            column: 8,
        },
    },
    Token {
        lexeme: ":",
        ty: Colon,
        span: Span {
            start: 85,
            end: 85,
            line: 4,
            column: 10,
        },
    },
    Token {
        lexeme: "1",
        ty: Literal,
        span: Span {
            start: 87,
            end: 87,
            line: 4,
            column: 12,
        },
    },
]
